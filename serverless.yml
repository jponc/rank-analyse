service: rank-analyse

plugins:
  - serverless-prune-plugin

package:
  exclude:
  - ./**
  include:
  - ./bin/**

provider:
  name: aws
  runtime: go1.x
  profile: uptactics
  memorySize: 128
  region: us-east-1 # US East 1 (N. Virginia)
  stage: ${opt:stage, 'staging'}
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    # Allow all SNS and SES
    - Effect: "Allow"
      Resource: "*"
      Action:
        - sns:*
        - ses:*
    # S3
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
        - s3:ListBucketVersions
      Resource:
        - 'arn:aws:s3:::${self:custom.env.S3_RESULTS_BUCKET_NAME}'
        - 'arn:aws:s3:::${self:custom.env.S3_RESULTS_BUCKET_NAME}/*'

functions:
  # == Authorizers ==
  Authoriser:
    handler: bin/Authoriser
    environment:
      JWT_SECRET: ${self:custom.env.JWT_SECRET}

  # == HTTP ==
  Healthcheck:
    handler: bin/Healthcheck
    events:
      - http:
          path: /healthcheck
          method: get

  RunCrawl:
    handler: bin/RunCrawl
    events:
      - http:
          path: /run-crawl
          method: post
          authorizer:
            name: Authoriser
            resultTtlInSeconds: 0
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}

  LambdaTest:
    handler: bin/LambdaTest
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /lambda-test
          method: get
          authorizer:
            name: Authoriser
            resultTtlInSeconds: 0

  GetCrawl:
    handler: bin/GetCrawl
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /crawls/{id}
          method: get
          parameters:
            paths:
              id: true
          authorizer:
            name: Authoriser
            resultTtlInSeconds: 0

  GetCrawlJson:
    handler: bin/GetCrawlJson
    environment:
      S3_RESULTS_BUCKET_NAME: ${self:custom.env.S3_RESULTS_BUCKET_NAME}
    events:
      - http:
          path: /crawls/{id}
          method: get
          parameters:
            paths:
              id: true

  # == SNS ==
  ProcessKeyword:
    handler: bin/ProcessKeyword
    events:
      - sns: ${self:service}-${self:provider.stage}-ProcessKeyword
    timeout: 120 # 2 Minutes timeout to fetch data from Zenserp
    vpc: ${self:custom.vpc}
    environment:
      ZENSERP_API_KEY: ${self:custom.env.ZENSERP_API_KEY}
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}

  ResultCreatedExtractPageInfo:
    handler: bin/ResultCreatedExtractPageInfo
    events:
      - sns: ${self:service}-${self:provider.stage}-ResultCreated
    timeout: 120 # 2 Minutes timeout to fetch and extract data
    vpc: ${self:custom.vpc}
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}

  CrawlFinishedUploadFileAndNotifyUser:
    handler: bin/CrawlFinishedUploadFileAndNotifyUser
    events:
      - sns: ${self:service}-${self:provider.stage}-CrawlFinished
    timeout: 120 # 2 Minutes timeout to upload and send email to user
    vpc: ${self:custom.vpc}
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
      S3_RESULTS_BUCKET_NAME: ${self:custom.env.S3_RESULTS_BUCKET_NAME}
      API_BASE_URL: ${self:custom.env.API_BASE_URL}

custom:
  env:
    JWT_SECRET: ${ssm:/${self:service}/${self:provider.stage}/JWT_SECRET~true}
    DB_CONN_URL: ${ssm:/${self:service}/${self:provider.stage}/DB_CONN_URL~true}
    SNS_PREFIX: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:service}-${self:provider.stage}'
    ZENSERP_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/ZENSERP_API_KEY~true}
    S3_RESULTS_BUCKET_NAME: ${ssm:/${self:service}/${self:provider.stage}/S3_RESULTS_BUCKET_NAME}
    API_BASE_URL: ${ssm:/${self:service}/${self:provider.stage}/API_BASE_URL}

  vpc:
    securityGroupIds: ${ssm:/uptactics/${self:provider.stage}/DEFAULT_SECURITY_GROUP}
    subnetIds: ${ssm:/uptactics/${self:provider.stage}/PRIVATE_SUBNET_IDS~split}

  prune:
    automatic: true
    number: 10
