service: rank-analyse

variablesResolutionMode: 20210326

plugins:
  - serverless-prune-plugin
  - serverless-domain-manager

package:
  patterns:
    - '!./**'
    - './bin/**'

provider:
  name: aws
  runtime: go1.x
  profile: uptactics
  memorySize: 128
  region: us-east-1 # US East 1 (N. Virginia)
  stage: ${opt:stage, 'staging'}
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true

  iam:
    role:
      statements:
        # Allow all SNS and SES
        - Effect: "Allow"
          Resource: "*"
          Action:
            - sns:*
            - ses:*
        # S3
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
            - s3:ListBucketVersions
          Resource:
            - 'arn:aws:s3:::${self:custom.env.S3_RESULTS_BUCKET_NAME}'
            - 'arn:aws:s3:::${self:custom.env.S3_RESULTS_BUCKET_NAME}/*'

functions:
  # == Authorizers ==
  Authoriser:
    handler: bin/Authoriser
    environment:
      JWT_SECRET: ${self:custom.env.JWT_SECRET}

  # == HTTP ==
  Healthcheck:
    handler: bin/Healthcheck
    events:
      - http:
          path: /healthcheck
          method: get
          cors: true

  RunCrawl:
    handler: bin/RunCrawl
    events:
      - http:
          path: /run-crawl
          method: post
          cors: true
          authorizer:
            name: Authoriser
            resultTtlInSeconds: 0
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}

  GetCrawls:
    handler: bin/GetCrawls
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /crawls
          method: get
          cors: true

  GetResults:
    handler: bin/GetResults
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /results
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                crawl_id: true

  GetCrawl:
    handler: bin/GetCrawl
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /crawls/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  GetResult:
    handler: bin/GetResult
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /results/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  GetResultInfo:
    handler: bin/GetResultInfo
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /results/{id}/info
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  GetResultLinks:
    handler: bin/GetResultLinks
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /results/{id}/links
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  GetResultTopics:
    handler: bin/GetResultTopics
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /results/{id}/topics
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  GetResultEntities:
    handler: bin/GetResultEntities
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
    events:
      - http:
          path: /results/{id}/entities
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  SimilarityAnalysis:
    handler: bin/SimilarityAnalysis
    memorySize: 512
    events:
      - http:
          path: /similarity-analysis
          method: post
          cors: true
    timeout: 30
    environment:
      ZENSERP_API_KEY: ${self:custom.env.ZENSERP_API_KEY}

  SimilarityAnalysisBatch:
    handler: bin/SimilarityAnalysisBatch
    events:
      - http:
          path: /similarity-analysis-batch
          method: post
          cors: true
    timeout: 10
    environment:
      ZENSERP_API_KEY: ${self:custom.env.ZENSERP_API_KEY}
      ZENSERP_BATCH_WEBHOOK_URL: ${ssm:/${self:service}/${self:provider.stage}/ZENSERP_BATCH_WEBHOOK_URL}

  # == SNS ==
  ProcessKeyword:
    handler: bin/ProcessKeyword
    events:
      - sns: ${self:service}-${self:provider.stage}-ProcessKeyword
    timeout: 120 # 2 Minutes timeout to fetch data from Zenserp
    vpc: ${self:custom.vpc}
    environment:
      ZENSERP_API_KEY: ${self:custom.env.ZENSERP_API_KEY}
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}

  ResultCreatedExtractPageInfo:
    handler: bin/ResultCreatedExtractPageInfo
    events:
      - sns: ${self:service}-${self:provider.stage}-ResultCreated
    timeout: 120 # 2 Minutes timeout to fetch and extract data
    vpc: ${self:custom.vpc}
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}

  ResultCreatedRunAnalysis:
    handler: bin/ResultCreatedRunAnalysis
    events:
      - sns: ${self:service}-${self:provider.stage}-ResultCreated
    timeout: 120 # 2 Minutes timeout to run analysis and save data to db
    vpc: ${self:custom.vpc}
    reservedConcurrency: 2
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
      TEXTRAZOR_API_KEY: ${self:custom.env.TEXTRAZOR_API_KEY}

custom:
  env:
    JWT_SECRET: ${ssm:/${self:service}/${self:provider.stage}/JWT_SECRET}
    DB_CONN_URL: ${ssm:/${self:service}/${self:provider.stage}/DB_CONN_URL}
    SNS_PREFIX: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:service}-${self:provider.stage}'
    ZENSERP_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/ZENSERP_API_KEY}
    TEXTRAZOR_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/TEXTRAZOR_API_KEY}
    S3_RESULTS_BUCKET_NAME: ${ssm:/${self:service}/${self:provider.stage}/S3_RESULTS_BUCKET_NAME}

  vpc:
    securityGroupIds: ${ssm:/uptactics/${self:provider.stage}/DEFAULT_SECURITY_GROUP}
    subnetIds: ${ssm:/uptactics/${self:provider.stage}/PRIVATE_SUBNET_IDS}

  prune:
    automatic: true
    number: 2

  customDomain:
    domainName: ${ssm:/${self:service}/${self:provider.stage}/DOMAIN}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
